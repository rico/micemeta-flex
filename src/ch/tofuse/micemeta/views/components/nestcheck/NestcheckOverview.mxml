<?xml version="1.0" encoding="utf-8"?>
<components:AbstractComponentView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  xmlns:components="ch.tofuse.micemeta.views.components.*"
						  xmlns:inputs="ch.tofuse.micemeta.views.inputs.*" 
						  xmlns:buttons="ch.tofuse.micemeta.views.buttons.*" 
						  xmlns:grids="ch.tofuse.micemeta.views.grids.*" 
						  xmlns:text="ch.tofuse.micemeta.views.text.*"
						  creationComplete="build()" >
	
	<components:states>
		<s:State name="view" />
		<s:State name="edit" />
		<s:State name="add" />
	</components:states>
	
	<components:layout>
		<s:VerticalLayout gap="20" />
	</components:layout>
	
	<fx:Script>
		<![CDATA[
			import ch.tofuse.micemeta.config.LayoutConfig;
			import ch.tofuse.micemeta.entities.Box;
			import ch.tofuse.micemeta.entities.BoxCheck;
			import ch.tofuse.micemeta.entities.LocationCheck;
			import ch.tofuse.micemeta.entities.NestCheck;
			import ch.tofuse.micemeta.entities.OtherLocation;
			import ch.tofuse.micemeta.entities.OtherLocationCheck;
			import ch.tofuse.micemeta.events.AutoCompleteTextInputEvent;
			import ch.tofuse.micemeta.events.EntityEvent;
			import ch.tofuse.micemeta.formatters.GeneralDateFormatter;
			
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.rpc.AsyncResponder;
			
			import org.davekeen.flextrine.orm.EntityManager;
			import org.davekeen.flextrine.orm.IEntityRepository;
			import org.davekeen.flextrine.orm.collections.EntityCollection;
			
			[Bindable] private var _locations:ArrayCollection = new ArrayCollection();
			[Bindable] private var _addedLocations:ArrayCollection = new ArrayCollection();
			[Bindable] private var _locationChecks:ArrayCollection = new ArrayCollection();
			[Bindable] private var _nestcheckDateValid:Boolean;
			
			private var _nestcheck:NestCheck;
			private var _boxRepository:IEntityRepository;
			private var _otherLocationRepository:IEntityRepository;
			private var _nestcheckRepository:IEntityRepository;
			
			private function build():void
			{
				
				//_nestcheckRepository = em.getRepository( NestCheck );
				
				if( currentState == 'add' ) {
					validateCheckDate();
				}
				
				//_boxRepository = em.getRepository( Box );
				//_boxRepository.loadAll().addResponder( new AsyncResponder( onLocationsLoadResult, onLoadFault ) );
				
				//_otherLocationRepository = em.getRepository( OtherLocation );
				//_otherLocationRepository.loadAll().addResponder( new AsyncResponder( onLocationsLoadResult, onLoadFault ) );
				
				
				validateCheckDate();
				
				locations.addEventListener( AutoCompleteTextInputEvent.CONFIRM_SELECTION, addLocationCheck );
				
				locationChecksGrid.dataSource = _locationChecks;
				locationChecksGrid.addEventListener( DragEvent.DRAG_COMPLETE, updateRanks );
				
			}
			
			public function get nestcheck():NestCheck
			{
				return _nestcheck;
			}
			
			public function set nestcheck(value:NestCheck):void
			{
				if( value && !_nestcheck ) {
					_nestcheck = value;
				}
				
				
			}
			
			private function addLocationCheck( event:Event = null ):void
			{
				var l:Object = locations.selectedItem;
				
				if( l is OtherLocation ) {
					var olc:OtherLocationCheck = new OtherLocationCheck();
					olc.otherLocation = OtherLocation(l);
					
					//em.persist( olc );
					
					_nestcheck.other_location_checks.addItem( olc );
					
					_locationChecks.addItem( olc );
					
					locationChecksGrid.selectedItem = olc;
					olc.rank = _locationChecks.getItemIndex( olc ) + 1;
					
				} else if ( l is Box ) {
					var bc:BoxCheck = new BoxCheck();
					bc.box = Box(l);
					
					
					//em.persist( bc );
					
					_nestcheck.box_checks.addItem( bc );
					
					_locationChecks.addItem( bc );
					
					locationChecksGrid.selectedItem = bc;
					bc.rank = _locationChecks.getItemIndex( bc ) + 1;
				}
				
				//em.flush();
				
				_addedLocations.addItem( l );
				locations.selectedItem = null;
				
			}
			override protected function removeEntity(e:EntityEvent):void
			{
				//deleteItem( event );
				
				if( e.target.data is OtherLocationCheck ) {
					//em.remove( OtherLocationCheck( event.target.data ) );
					_addedLocations.removeItemAt( _addedLocations.getItemIndex( OtherLocationCheck(e.target.data).otherLocation  ) );
				} else if( e.target.data is BoxCheck ) {
					//em.remove( BoxCheck( event.target.data ) );	
					_addedLocations.removeItemAt( _addedLocations.getItemIndex( BoxCheck(e.target.data).box ) );
				}
				
				//em.flush();
				_locationChecks.removeItemAt( _locationChecks.getItemIndex( e.target.data  ) );
				
				
				//_locations.filterFunction = locationsFilterFunction;
				//_locations.refresh();
				
				updateRanks();
				locationChecksGrid.selectedIndex = 0;
				
			}
			
			private function updateRanks( event:Event = null ):void
			{
				for each ( var locationCheck:Object in _locationChecks ) {
					if ( locationCheck is OtherLocationCheck ) {
						OtherLocationCheck( locationCheck ).rank = _locationChecks.getItemIndex( locationCheck ) + 1;
					} else if ( locationCheck is BoxCheck ) {
						BoxCheck( locationCheck ).rank = _locationChecks.getItemIndex( locationCheck ) + 1;
					}
				}
				
				//em.flush();
			}
			
			private function locationsLabelFunction( item:Object ):String
			{
				if( item is OtherLocation ) {
					return OtherLocation(item).code + " - " + OtherLocation(item).description;
				}
				
				if( item is Box ) {
					return "Box " + Box(item).id;
				}
				
				return item.id;
			}
			
			private function locationChecksLabelFunction( item:Object, column:DataGridColumn ):String
			{
				if( item is OtherLocationCheck ) {
					return OtherLocationCheck(item).otherLocation.code + " - " + OtherLocationCheck(item).otherLocation.description;
				}
				
				if( item is BoxCheck ) {
					return "Box " + BoxCheck(item).box.id;
				}
				
				return "(no location associated)";
			}
			
			private function onLocationsLoadResult( result:Object, token:Object ):void
			{
				_locations.addAllAt( new ArrayCollection( result.result ), _locations.length );
			}
			
			private function locationsFilterFunction( item:Object ):Boolean 
			{
				if( _addedLocations.getItemIndex( item ) == -1) {
					return true;
				}
				
				return false;
			}
			
			private function validateCheckDate():void
			{
				if( _nestcheckRepository.findBy( {checkdate: nestcheckDate.selectedDate } ).length == 0 ) {
					_nestcheckDateValid = true;
				} else {
					_nestcheckDateValid = false;
				}
			}
			
		]]>
	</fx:Script>
	
	<!-- Date -->
	<s:VGroup gap="10">
		<s:Label text="Date" 
				 styleName="formItemlabel" 
				 verticalCenter="0"/>
		<s:HGroup gap="10" verticalAlign="middle">
			<mx:DateField id="nestcheckDate" 
						  formatString="{GeneralDateFormatter.DATE_FORMAT}" 
						  selectedDate="{new Date()}"
						  change="validateCheckDate()"
						  left="{LayoutConfig.FORM_ITEM_VALUE_LEFT}"
						  verticalCenter="0"
						  enabled="{ currentState == 'add' ||Â currentState == 'edit' }"/>	
			<text:AttentionText text="A nestcheck already exists for the selected date.\nPlease select another date or edit the existing nestcheck."
								includeInLayout="{!_nestcheckDateValid}" visible="{!_nestcheckDateValid}" 
								width="100"/>
		</s:HGroup>
		
	</s:VGroup>
	
	<!-- checks -->
	<s:VGroup id="checks"
			  gap="10"
			  includeInLayout="{_nestcheckDateValid}"
			  visible="{_nestcheckDateValid}">
		
		<s:Label text="Locations" 
				 styleName="formItemlabel" 
				 left="{LayoutConfig.FORM_ITEM_LABEL_LEFT}"
				 verticalAlign="top"/>
		
		<s:HGroup left="{LayoutConfig.FORM_ITEM_VALUE_LEFT}" gap="10" verticalAlign="middle"
				  includeIn="add">
			<inputs:AutoCompleteTextInputFilterFunction id="locations" 
										  dataProvider="{_locations}"
										  labelFunction="locationsLabelFunction"
										  filterFunction="locationsFilterFunction"
										  prefixOnly="false"
										  width="150" height="22" 
										  requireSelection="true"/>
			<buttons:IconButton label="Add Location" 
								click="addLocationCheck()"
								enabled="{locations.selectedItem != null}"
								iconUp="@Embed(source='ch/tofuse/micemeta/assets/img/add.png')" 
								height="22"/>
		</s:HGroup>
		
		<grids:AutoResizeDataGrid id="locationChecksGrid"
								  sortableColumns="false"
								  dragEnabled="true"
								  dragMoveEnabled="true"
								  dropEnabled="true"
								  width="440">
			<grids:columns>
				<mx:DataGridColumn dataField="rank" headerText="Rank" width="50" />
				<mx:DataGridColumn headerText="Location" labelFunction="locationChecksLabelFunction" width="100" />
				<mx:DataGridColumn dataField="remark" headerText="Remark" wordWrap="true" width="250" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.DetailItemRenderer" width="30" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.EditItemRenderer" width="30" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.DeleteItemRenderer" width="30" />
			</grids:columns>
		</grids:AutoResizeDataGrid>
	</s:VGroup>
	
</components:AbstractComponentView>
