<?xml version="1.0" encoding="utf-8"?>
<components:AbstractComponentView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  xmlns:components="ch.tofuse.micemeta.views.components.*"
						  xmlns:inputs="ch.tofuse.micemeta.views.inputs.*" 
						  xmlns:buttons="ch.tofuse.micemeta.views.buttons.*" 
						  xmlns:grids="ch.tofuse.micemeta.views.grids.*" 
						  xmlns:text="ch.tofuse.micemeta.views.text.*"
						  creationComplete="build()"
						  width="100%"
						  height="100%">
	
	<fx:Metadata>
		[Event(name="addLocationCheck", type="ch.tofuse.micemeta.events.NestcheckViewEvent")]
		[Event(name="editLocationCheck", type="ch.tofuse.micemeta.events.NestcheckViewEvent")]
		[Event(name="showLocationCheck", type="ch.tofuse.micemeta.events.NestcheckViewEvent")]
	</fx:Metadata>
		
	<components:states>
		<s:State name="view" />
		<s:State name="edit" />
		<s:State name="add" />
	</components:states>
	
	<components:layout>
		<s:VerticalLayout gap="20" />
	</components:layout>
	
	<fx:Script>
		<![CDATA[
			import ch.tofuse.micemeta.config.LayoutConfig;
			import ch.tofuse.micemeta.entities.BoxCheckEntity;
			import ch.tofuse.micemeta.entities.BoxEntity;
			import ch.tofuse.micemeta.entities.ILocationCheck;
			import ch.tofuse.micemeta.entities.NestCheckEntity;
			import ch.tofuse.micemeta.entities.OtherLocationCheckEntity;
			import ch.tofuse.micemeta.entities.OtherLocationEntity;
			import ch.tofuse.micemeta.events.ComponentEvent;
			import ch.tofuse.micemeta.events.DataGridItemRendererEvent;
			import ch.tofuse.micemeta.events.EntityEvent;
			import ch.tofuse.micemeta.events.NestcheckViewEvent;
			import ch.tofuse.micemeta.formatters.GeneralDateFormatter;
			import ch.tofuse.micemeta.utils.DateUtils;
			import ch.tofuse.micemeta.utils.LocationUtils;
			
			import mx.collections.ArrayCollection;
			import mx.collections.AsyncListView;
			import mx.events.CollectionEvent;
			
			import org.davekeen.flextrine.orm.EntityRepository;
			import org.davekeen.flextrine.util.EntityUtil;
			
			[Bindable] public var locationsData:ArrayCollection = new ArrayCollection();
			[Bindable] private var _nestcheck:NestCheckEntity;
			[Bindable] private var _disabledNestcheckDates:Array;
			
			
			private function build():void
			{
				ILocationChecksGrid.addEventListener( DataGridItemRendererEvent.EDIT_ITEM, editILocationCheck );
				ILocationChecksGrid.addEventListener( DataGridItemRendererEvent.REMOVE_ITEM, removeILocationCheck );
				ILocationChecksGrid.addEventListener( DataGridItemRendererEvent.SHOW_ITEM, showILocationCheck );
			}
			
			[Bindable(Event="nestcheckChanged")]
			public function get nestcheck():NestCheckEntity
			{
				return _nestcheck;
			}
			
			public function set nestcheck(value:NestCheckEntity):void
			{
				if( value ) {
					_nestcheck = value;
					//_nestcheck.locationChecks.addEventListener(CollectionEvent.COLLECTION_CHANGE, locationsChangeHandler);
					ILocationChecksGrid.dataSource = _nestcheck.locationChecks;
					dispatchEvent( new Event("nestcheckChanged") );
				}
			}

			private function locationsChangeHandler(e:CollectionEvent):void
			{
				trace("locations change => " + e.kind);
			}
			
			public function set disabledNestcheckDates( value:Array ):void
			{
				_disabledNestcheckDates = value;
			}
			
			private function addILocationCheck( e:Event = null ):void
			{
				var l:Object = locations.selectedItem;
				var lc:ILocationCheck;
				
				if( l is OtherLocationEntity ) {
					var olc:OtherLocationCheckEntity = new OtherLocationCheckEntity();
					dispatchPersistEntity( olc );
					
					lc = olc;
					olc.otherLocation = OtherLocationEntity(l);
					olc.nestcheck = _nestcheck;
					
					_nestcheck.locationChecks.addItem( olc );
					ILocationChecksGrid.selectedItem = olc;
					
				} else if ( l is BoxEntity ) {
					var bc:BoxCheckEntity = new BoxCheckEntity();
					dispatchPersistEntity( bc );
					
					lc = bc;
					bc.box = BoxEntity(l);
					bc.nestcheck = _nestcheck;
					
					_nestcheck.locationChecks.addItem( bc );
					ILocationChecksGrid.selectedItem = bc;e
				}
				
				updateRanks();
				locations.selectedItem = null;
				
				dispatchEvent( new NestcheckViewEvent( NestcheckViewEvent.ADD_LOCATION_CHECK, lc) );
				
			}
			
			private function editILocationCheck( e:DataGridItemRendererEvent ):void
			{
				e.stopImmediatePropagation();
				dispatchEvent( new NestcheckViewEvent( NestcheckViewEvent.EDIT_LOCATION_CHECK, ILocationCheck(e.target.data) ) );
			}
			
			private function showILocationCheck( e:DataGridItemRendererEvent ):void
			{
				e.stopImmediatePropagation();
				dispatchEvent( new NestcheckViewEvent( NestcheckViewEvent.SHOW_LOCATION_CHECK, ILocationCheck(e.target.data) ) );
			}
			
			private function removeILocationCheck( e:DataGridItemRendererEvent ):void
			{
				e.stopImmediatePropagation();
				
				if( e.target.data is OtherLocationCheckEntity ) {
					_nestcheck.locationChecks.removeItem( e.target.data  );
					dispatchRemoveEntity( OtherLocationCheckEntity( e.target.data ) );
					
				} else if( e.target.data is BoxCheckEntity ) {
					_nestcheck.locationChecks.removeItem( e.target.data );
					dispatchRemoveEntity( BoxCheckEntity( e.target.data ) );
				}
				
				updateRanks();
				ILocationChecksGrid.selectedIndex = 0;
				
			}
			
			private function updateRanks( e:Event = null ):void
			{
				for each ( var locationCheck:ILocationCheck in _nestcheck.locationChecks ) {
					locationCheck.rank = _nestcheck.locationChecks.getItemIndex( locationCheck ) + 1;
				}
			}
			
			private function locationsFilterFunction( item:Object ):Boolean 
			{
				for each( var lc:ILocationCheck in _nestcheck.locationChecks ) {
					if( lc is BoxCheckEntity && item is BoxEntity ) {
						
						if( BoxCheckEntity( lc ).box == BoxEntity( item) ) {
							return false;
						}
						
					} else if ( lc is OtherLocationCheckEntity && item is OtherLocationEntity ) {
						
						if( OtherLocationCheckEntity( lc ).otherLocation == OtherLocationEntity( item) ) {
							return false;
						}		
						
					}
				}
				
				return true;
			}

			private function updateNestcheckDate():void
			{
				
				if ( repository.getEntityState( _nestcheck ) == EntityRepository.STATE_NEW ) {
					dispatchPersistEntity( _nestcheck );
				}
				
				_nestcheck.checkdate = nestcheckDateSelector.selectedDate;
				
			}
			
			
		]]>
	</fx:Script>
	
	<!-- Date -->
	<s:VGroup gap="10">
		<s:Label text="Date" 
				 styleName="formItemlabel" 
				 verticalCenter="0"/>
		<s:HGroup gap="10" verticalAlign="middle"
				  paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
			<mx:DateField id="nestcheckDateSelector"
						  selectedDate="{_nestcheck.checkdate}"
						  formatString="{GeneralDateFormatter.DATE_FORMAT}" 
						  disabledRanges="{_disabledNestcheckDates}"
						  change="updateNestcheckDate()"
						  left="{LayoutConfig.FORM_ITEM_VALUE_LEFT}"
						  verticalCenter="0"
						  includeIn="add,edit"
						  showToday="false"/>	
			<inputs:BaseTextInput id="nestcheckDateIndicator" enabled="false"
								  includeIn="view"
								  width="65"
								  text="{DateUtils.toGeneralDateFormat(_nestcheck.checkdate)}"/>
			
			<text:InfoText text="Select the date the nestcheck took place."
						   visible="{_nestcheck.checkdate == null}"
						   includeInLayout="{_nestcheck.checkdate == null}" />
		</s:HGroup>
		
	</s:VGroup>
	
	<!-- checks -->
	<s:VGroup id="checks"
			  gap="10"
			  includeInLayout="{nestcheckDateSelector.selectedDate != null}"
			  visible="{nestcheckDateSelector.selectedDate != null}">
		
		<s:Label text="Locations" 
				 styleName="formItemlabel" 
				 left="{LayoutConfig.FORM_ITEM_LABEL_LEFT}"
				 verticalAlign="top"/>
		
		<s:HGroup left="{LayoutConfig.FORM_ITEM_VALUE_LEFT}" 
				  gap="10" verticalAlign="middle"
				  paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2"
				  includeIn="add,edit">
			<inputs:AutoCompleteTextInputFilterFunction id="locations" 
										  dataProvider="{locationsData}"
										  labelFunction="{LocationUtils.locationLabelFunction}"
										  filterFunction="locationsFilterFunction"
										  confirmSelection="addILocationCheck( event )"
										  prefixOnly="false"
										  width="150" 
										  height="25"
										  requireSelection="true"/>
			<buttons:IconButton label="Add Location" 
								click="addILocationCheck()"
								enabled="{locations.selectedItem != null}"
								iconUp="@Embed(source='ch/tofuse/micemeta/assets/img/add.png')" />
		</s:HGroup>
		
		<grids:AutoResizeDataGrid id="ILocationChecksGrid"
								  dragComplete="updateRanks( event )"
								  sortableColumns="false"
								  dragEnabled="{currentState == 'view' ? false : true}"
								  dragMoveEnabled="{currentState == 'view' ? false : true}"
								  dropEnabled="{currentState == 'view' ? false : true}"
								  width="400">
			<grids:columns>
				<mx:DataGridColumn dataField="rank" headerText="Rank" width="50" />
				<mx:DataGridColumn headerText="Location" labelFunction="{LocationUtils.locationCheckLabelFunction}" width="100" />
				<mx:DataGridColumn dataField="remark" headerText="Remark" wordWrap="true" width="240" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.datagrid.DetailItemRenderer" width="30" includeIn="view" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.datagrid.EditItemRenderer" width="30" includeIn="add,edit"/>
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.datagrid.DeleteItemRenderer" width="30" includeIn="add,edit"/>
			</grids:columns>
		</grids:AutoResizeDataGrid>
	</s:VGroup>
	
</components:AbstractComponentView>
