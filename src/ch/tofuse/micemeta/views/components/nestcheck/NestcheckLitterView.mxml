<?xml version="1.0" encoding="utf-8"?>
<components:AbstractComponentView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  xmlns:components="ch.tofuse.micemeta.views.components.*"
						  xmlns:buttons="ch.tofuse.micemeta.views.buttons.*" 
						  xmlns:grids="ch.tofuse.micemeta.views.grids.*"
						  xmlns:inputs="ch.tofuse.micemeta.views.inputs.*"
						  creationComplete="build()">
	<components:states>
		<s:State name="boxView" stateGroups="view"/>
		<s:State name="boxEdit" stateGroups="edit" />
		<s:State name="boxAdd" stateGroups="add" />
		<s:State name="otherLocationView" stateGroups="view" />
		<s:State name="otherLocationEdit" stateGroups="edit" />
		<s:State name="otherLocationAdd" stateGroups="add" />
	</components:states>
	
	<fx:Script>
		<![CDATA[
			import ch.tofuse.micemeta.entities.BoxCheckEntity;
			import ch.tofuse.micemeta.entities.BoxEntity;
			import ch.tofuse.micemeta.entities.ILocationCheck;
			import ch.tofuse.micemeta.entities.LitterCheckEntity;
			import ch.tofuse.micemeta.entities.LitterEntity;
			import ch.tofuse.micemeta.entities.NestCheckEntity;
			import ch.tofuse.micemeta.entities.OtherLocationCheckEntity;
			import ch.tofuse.micemeta.entities.OtherLocationEntity;
			import ch.tofuse.micemeta.events.AutoCompleteListEvent;
			import ch.tofuse.micemeta.events.DataGridItemRendererEvent;
			import ch.tofuse.micemeta.utils.BindingDebugger;
			import ch.tofuse.micemeta.utils.DataUtils;
			import ch.tofuse.micemeta.utils.LitterUtils;
			
			import mx.collections.ArrayCollection;
			
			import org.davekeen.flextrine.orm.EntityProxy;

			
			private var _litter:LitterEntity;
			private var _currentLocation:Object;
			private var _boxCheck:BoxCheckEntity;
			private var _otherLocationCheck:OtherLocationCheckEntity;
			private var _newLitter:Boolean;
			
			[Bindable] private var _proposedLitterIdentifier:String;
			[Bindable] private var _existingLittersData:ArrayCollection; 
			[Bindable] private var _locationCheck:ILocationCheck;

			private function build():void
			{
				//BindingDebugger.debugComponent( this );
				litters.addEventListener( DataGridItemRendererEvent.REMOVE_ITEM, removeLitter );
			}
			
			public function get locationCheck():ILocationCheck
			{
				return _locationCheck;
			}
			
			public function set locationCheck(value:ILocationCheck):void
			{
				_locationCheck = value;
				
				if( _locationCheck is BoxCheckEntity ) {
					boxCheck = BoxCheckEntity( _locationCheck );
				} else if( _locationCheck is OtherLocationCheckEntity ) {
					otherLocationCheck = OtherLocationCheckEntity( _locationCheck );
				}
				
				litters.dataSource = _locationCheck.litterChecks;
			}
			
			public function set existingLittersData( value:ArrayCollection ):void
			{
				if( value ) {
					_existingLittersData = new ArrayCollection( DataUtils.copyEntitiesOverArray( entities.source ) );
				}
				
			}
			
			[Inspectable(category="General",type="String", defaultValue="view",enumeration="view, edit, add")]
			override public function set mode(value:String):void
			{
				_mode = value;
				
				switch( _mode ) {
					case "view":
						boxCheck != null ? currentState = 'boxView' : currentState = 'otherLocationView';
						break;
					
					case "edit":
						boxCheck != null ? currentState = 'boxEdit' : currentState = 'otherLocationEdit';
						break;
					
					case "add":
						boxCheck != null ? currentState = 'boxAdd' : currentState = 'otherLocationAdd';
						break;
				}
				
				dispatchEvent( new Event("modeChanged") );
			}

			public function get litter():LitterEntity
			{
				return _litter;
			}
			
			public function get otherLocationCheck():OtherLocationCheckEntity
			{
				return _otherLocationCheck;
			}
			
			public function set otherLocationCheck(value:OtherLocationCheckEntity):void
			{
				if( value ) {
					_otherLocationCheck = value;
					_locationCheck = _otherLocationCheck;
					_currentLocation = _otherLocationCheck.otherLocation;
					proposeLitterIdentifier();
					_boxCheck = null;
					mode = _mode;
				}
			}
			
			public function get boxCheck():BoxCheckEntity
			{
				return _boxCheck;
			}
			
			public function set boxCheck(value:BoxCheckEntity):void
			{
				if( value ) {
					_boxCheck = value;
					_locationCheck = _boxCheck;
					_currentLocation = _boxCheck.box;
					proposeLitterIdentifier();
					_otherLocationCheck = null;
					mode = _mode;
				}
			}
			
			protected function addNewLitter( ):void
			{
				_litter = new LitterEntity();
				_litter.identifier = new_litter_ti.text;
				_litter.first_found_age = int( new_litter_age.text );
				_litter.first_found_date = new Date();
				
				dispatchPersistEntity( _litter );
				
				_newLitter = true;
				addLitterCheck();
				proposeLitterIdentifier();
			}
			
			private function addExistingLitter( e:AutoCompleteListEvent ):void
			{
				_litter = LitterEntity( e.item );
				
				_newLitter = false;
				addLitterCheck();
			}
			
			private function addLitterCheck( ):void
			{
				var lc:LitterCheckEntity = new LitterCheckEntity();
				
				if( _newLitter ) {
					lc.remark = new_litter_remark.text;	
				} else {
					lc.remark = existing_litter_remark.text;
				}
				
				lc.litter = _litter;
				
				if( _locationCheck is OtherLocationCheckEntity ) {
					lc.locationCheck = otherLocationCheck;
				} else if( _locationCheck is BoxCheckEntity ) {
					lc.locationCheck = boxCheck;
				}
				
				dispatchPersistEntity( lc );
				_litter.litterChecks.addItem( lc );
				_locationCheck.litterChecks.addItem( lc );
				
				new_litter_remark.text = '';
				existing_litter_remark.text = '';
				
			}
			
			public function proposeLitterIdentifier():void
			{
				
				var litterIdentifier:String = litterIdentifierDateFormatter.format( new Date() );
				
				if( _locationCheck is BoxCheckEntity ) {
					litterIdentifier = litterIdentifier.concat( BoxEntity(_currentLocation).id );
				}else if( _locationCheck is OtherLocationCheckEntity ) {
					litterIdentifier = litterIdentifier.concat( OtherLocationEntity(_currentLocation).code );
				}
				
				var i:uint = 0;
				var secondaryCode:String = '';
				if( repository ) {
					while( repository.findOneBy( { identifier: litterIdentifier + secondaryCode } ) != null ) {					
						i++;
						secondaryCode = '_' + i.toString();
					}
				}
				
				_proposedLitterIdentifier = litterIdentifier.concat( secondaryCode );					
			}
			
			/**
			 * remove LitterCheck and remove the corresponding Litter
			 * if this LitterCheck was the only one
			 */ 
			private function removeLitter( e:Event ):void
			{
				e.stopImmediatePropagation();
				
				var litterCheck:LitterCheckEntity = LitterCheckEntity(e.target.data);
				
				if( litterCheck.litter.litterChecks.length == 1 ) {
					dispatchRemoveEntity(  litterCheck.litter );
					proposeLitterIdentifier();
				}
				
				_locationCheck.litterChecks.removeItemAt( _locationCheck.litterChecks.getItemIndex( litterCheck ) );
				dispatchRemoveEntity(  litterCheck );
			}
			
			private function existingLitterFilterFunction( item:EntityProxy ):Boolean
			{
				for each ( var litterCheck:LitterCheckEntity in _locationCheck.litterChecks ) {
					if( litterCheck.litter.id == LitterEntity(item._item).id ) {
						return false
					}
				}
				
				return false;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:DateFormatter id="litterIdentifierDateFormatter" formatString="YYYYMMDD" />
	</fx:Declarations>
	
	<components:layout>
		<s:VerticalLayout gap="10" />
	</components:layout>
	
	<!-- new litter -->
	<s:VGroup gap="10" includeIn="boxAdd,boxEdit,otherLocationAdd,otherLocationEdit">
		
		<s:Label text="Add New Litter" styleName="formPartHeaderLabel" />
		
		<s:HGroup gap="10" verticalAlign="middle">
			<s:Label text="identifier" width="60" textAlign="left"/>
			<s:TextInput id="new_litter_ti" text="{_proposedLitterIdentifier}" />
		</s:HGroup>	
		
		<s:HGroup gap="10" verticalAlign="middle">
			<s:Label text="age" width="60" textAlign="left"/>
			<inputs:NumericTextInput id="new_litter_age" maxChars="3" widthInChars="3"/>
			<s:Label text="(in days)" styleName="inputInfoLabel"/>
		</s:HGroup>	
		
		<s:HGroup gap="10" verticalAlign="middle">
			<s:Label text="remark" width="60" textAlign="left"/>
			<s:TextArea id="new_litter_remark" widthInChars="30" heightInLines="5"/>
		</s:HGroup>	
		
		<s:Group width="100%">
			<buttons:IconButton label="Add"
								click="addNewLitter()"
								iconUp="@Embed(source='ch/tofuse/micemeta/assets/img/add.png')" 
								height="22"
								enabled="{(new_litter_age.text != '') &amp;&amp; (new_litter_ti.text != '') }"
								left="70"/>	
		</s:Group>
	</s:VGroup>
	
	
	
	<!-- existing litter -->
	<mx:Spacer height="5" 
			   includeIn="boxAdd,boxEdit,otherLocationAdd,otherLocationEdit"/>
	<s:VGroup gap="10"
			  includeIn="boxAdd,boxEdit,otherLocationAdd,otherLocationEdit">
		<s:Label text="Add Existing Litter" styleName="formPartHeaderLabel" />
		
		<s:HGroup gap="10" verticalAlign="middle">
			<s:Label text="litter" width="60" textAlign="left"/>
			<inputs:AutoCompleteList id="existingLitterInput"
									 mode="select"
									 itemAdded="addExistingLitter( event )"
									 filterFunction="existingLitterFilterFunction"
									 requireSelection="true"
									 showGrid="false"
									 listData="{_existingLittersData}" 
									 field="identifier"
									 widthInPixels="150"
									 left="70"/>	
			
		</s:HGroup>
		
		<s:HGroup gap="10" verticalAlign="top">
			<s:Label text="remark" width="60" textAlign="left"/>
			<s:TextArea id="existing_litter_remark" widthInChars="30" heightInLines="5"/>
		</s:HGroup>	
		
	</s:VGroup>
	
	<mx:Spacer height="10" />
	
	<!-- added litters -->
	<s:VGroup gap="10" verticalAlign="top"
			  includeInLayout="{repository.entities.length > 0}"
			  visible="{repository.entities.length > 0}">
		
		<s:Label text="Added Litters" styleName="formPartHeaderLabel"
				 includeIn="boxAdd,boxEdit,otherLocationAdd,otherLocationEdit"/>
		
		<grids:AutoResizeDataGrid id="litters" dataSource="{_locationCheck.litterChecks}"
					 wordWrap="true"
					 sortableColumns="false"
					 editable="false" width="300">
			
			<grids:columns>
				<mx:DataGridColumn headerText="identifier" labelFunction="{LitterUtils.litterCheckIdentifierLabelFunction}" />
				<mx:DataGridColumn headerText="age (in days)" labelFunction="{LitterUtils.calculateLitterAgeLabelFunction}" />
				<mx:DataGridColumn headerText="remark" dataField="remark" />
				<mx:DataGridColumn itemRenderer="ch.tofuse.micemeta.views.renderers.datagrid.DeleteItemWithoutConfirmRenderer" width="30" includeIn="boxAdd,boxEdit,otherLocationAdd,otherLocationEdit"/>
			</grids:columns>
		</grids:AutoResizeDataGrid>							
	</s:VGroup>	
	
</components:AbstractComponentView>
