<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:buttons="ch.tofuse.micemeta.views.buttons.*"
		  skinClass="ch.tofuse.micemeta.skins.menu.MainMenuSkin"
		  width="100%">
	
	<fx:Declarations>
		<fx:String id="headerLabel">micemeta</fx:String>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import ch.tofuse.micemeta.events.ContentEvent;
			import ch.tofuse.micemeta.interfaces.IContent;
			import ch.tofuse.micemeta.managers.ComponentManager;
			import ch.tofuse.micemeta.managers.ModuleManager;
			import ch.tofuse.micemeta.views.buttons.ComponentButton;
			import ch.tofuse.micemeta.views.buttons.ContentButton;
			import ch.tofuse.micemeta.views.buttons.ModuleButton;
			import ch.tofuse.micemeta.views.buttons.SettingsButton;
			import ch.tofuse.micemeta.views.modules.AbstractModuleView;
			import ch.tofuse.micemeta.views.settings.SettingsView;
			
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import spark.components.HGroup;
			
			[SkinPart(type="ch.tofuse.micemeta.views.components.buttons.ModuleButton", required="false")]
			public var moduleButton:IFactory;
			
			[SkinPart(type="ch.tofuse.micemeta.views.components.buttons.ComponentButton", required="false")]
			public var componentButton:IFactory;
			
			[SkinPart(required="true")]
			public var modulesGroup:HGroup;
			
			[SkinPart(required="true")]
			public var componentsGroup:HGroup;
			
			[SkinPart(required="false")]
			public var settingsGroup:HGroup;
			
			[SkinPart(required="false")]
			public var settingsButton:SettingsButton;
			
			private var _settingsView:SettingsView;
			
			private var _components:Vector.<IContent>;
			private var _modules:Vector.<IContent>;
			private var _content:Vector.<IContent>;
			
			override protected function partAdded( partName:String, instance:Object ):void
			{
				
				super.partAdded( partName, instance );
				
				if ( partName == "moduleButton" ) {
					ModuleButton( instance ).addEventListener( MouseEvent.CLICK, addContent );
				}
				
				if( partName == "componentButton" ) {
					ComponentButton( instance ).addEventListener( MouseEvent.CLICK, addContent );
				}
				
				if( partName == "settingsButton" ) {
					SettingsButton( instance ).addEventListener( MouseEvent.CLICK, showSettings );
				}
			}
			
			override protected function partRemoved(partName:String, instance:Object) : void
			{
				super.partRemoved(partName, instance);
				
				if (partName == "moduleButton") {
					ModuleButton(instance).removeEventListener(MouseEvent.CLICK, addContent);
				}
				
				if( partName == "componentButton" ) {
					ComponentButton( instance ).removeEventListener( MouseEvent.CLICK, addContent );
				}
			}
				
			
			public function set modules( m:Vector.<IContent> ):void
			{
				_modules = m;
				var mb:ModuleButton;
				for each( var module:IContent in _modules ) {
					mb = createDynamicPartInstance( "moduleButton" ) as ModuleButton;   
					mb.component = module;
					modulesGroup.addElement( mb );
				}
			}
			
			public function set components( c:Vector.<IContent> ):void
			{
				_components = c;
				var cb:ComponentButton;
				for each( var component:IContent in _components ) {
					cb = createDynamicPartInstance( "componentButton" ) as ComponentButton;   
					cb.component = component;
					modulesGroup.addElement( cb );
				}
			}
			
			public function set content( c:Vector.<IContent> ):void
			{
				_content = c;
			}
			
			private function addContent( event:MouseEvent ):void
			{
				var c:IContent = ( event.target as ContentButton ).component;
				dispatchEvent( new ContentEvent(ContentEvent.ADD_CONTENT, c) );
				
			}
			
			public function showSettings( e:MouseEvent ):void
			{
				
				_settingsView = new SettingsView();
				
				PopUpManager.addPopUp( _settingsView, FlexGlobals.topLevelApplication as DisplayObject, true );
				PopUpManager.centerPopUp( _settingsView );
				
				_settingsView.content = _content;
			}
		]]>
	</fx:Script>
	
</s:SkinnableComponent>
